<Application
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
	xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
	xmlns:Wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
	xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
	xmlns:softwaresAnalyze="clr-namespace:SoftwaresAnalyze"
	xmlns:cal="http://www.caliburnproject.org"
	x:Class="SoftwaresAnalyze.App"
	StartupUri="MainWindow.xaml">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>

				<!--Color-->
				<ResourceDictionary>
					<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

					<SolidColorBrush x:Key="DrakPrimary" Color="#00796B" />
					<SolidColorBrush x:Key="Primary" Color="#009688" />
					<SolidColorBrush x:Key="LightPrimary" Color="#FFFFFF" />
					<SolidColorBrush x:Key="TextIcon" Color="#FFFFFF" />
					<SolidColorBrush x:Key="PrimaryText" Color="#212121" />
					<SolidColorBrush x:Key="SecondText" Color="#727272" />
					<SolidColorBrush x:Key="BlackText" Color="#212121" />


					<SolidColorBrush x:Key="Pink" Color="#C2185B" />
					<SolidColorBrush x:Key="Red" Color="#D50000" />
					<SolidColorBrush x:Key="Green" Color="#1B5E20" />
					<SolidColorBrush x:Key="DrakBlue" Color="#0288D1" />
					<SolidColorBrush x:Key="Blue" Color="#03A9F4" />
					<SolidColorBrush x:Key="Orange" Color="#E64A19" />
					<SolidColorBrush x:Key="lightBlack" Color="#343f4a" />

					<SolidColorBrush x:Key="DrakYellow" Color="#AFB42B" />
					<SolidColorBrush x:Key="Yellow" Color="#CDDC39" />
				</ResourceDictionary>

				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignColors;component/Themes/materialdesigncolor.teal.xaml" />
				<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
				<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
				<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
				<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/teal.xaml" />

				<!--Override color-->
				<ResourceDictionary>
					<SolidColorBrush x:Key="PrimaryHueLightBrush" Color="{StaticResource Primary100}" />
					<SolidColorBrush x:Key="PrimaryHueLightForegroundBrush"
					                 Color="{StaticResource Primary100Foreground}" />
					<SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{StaticResource Primary500}" />
					<SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="{StaticResource Primary500Foreground}" />
					<SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="{StaticResource Primary700}" />
					<SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush"
					                 Color="{StaticResource Primary700Foreground}" />

					<!-- MAHAPPS BRUSHES -->
					<SolidColorBrush x:Key="HighlightBrush" Color="{StaticResource Primary700}" options:Freeze="True" />
					<SolidColorBrush x:Key="AccentColorBrush" Color="{StaticResource Primary500}" options:Freeze="True" />
					<SolidColorBrush x:Key="AccentColorBrush2" Color="{StaticResource Primary400}"
					                 options:Freeze="True" />
					<SolidColorBrush x:Key="AccentColorBrush3" Color="{StaticResource Primary300}"
					                 options:Freeze="True" />
					<SolidColorBrush x:Key="AccentColorBrush4" Color="{StaticResource Primary200}"
					                 options:Freeze="True" />
					<SolidColorBrush x:Key="WindowTitleColorBrush" Color="{StaticResource Primary700}"
					                 options:Freeze="True" />
					<SolidColorBrush x:Key="AccentSelectedColorBrush" Color="{StaticResource Primary500Foreground}"
					                 options:Freeze="True" />
				</ResourceDictionary>

				<!--Theme-->
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.CheckBox.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListBox.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ProgressBar.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.textbox.xaml" />

				<ResourceDictionary />
			</ResourceDictionary.MergedDictionaries>
            <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
                <Setter Property="ToolTip" Value="{Binding ToolTip, Mode=OneTime}"/>
                <Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="HorizontalContentAlignment"
				        Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="VerticalContentAlignment"
				        Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="Padding" Value="8" />
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBoxItem}">
							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
							        Background="{TemplateBinding Background}" ClipToBounds="{TemplateBinding ClipToBounds}"
							        Margin="{TemplateBinding Margin}" ToolTip="{Binding ToolTip, Mode=OneTime}">
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualStateGroup.Transitions>
											<VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" Storyboard="{x:Null}" To="Normal">
												<VisualTransition.GeneratedEasingFunction>
													<CircleEase EasingMode="EaseOut" />
												</VisualTransition.GeneratedEasingFunction>
											</VisualTransition>
										</VisualStateGroup.Transitions>
										<VisualState x:Name="Normal" />
										<VisualState x:Name="MouseOver">
											<Storyboard>
												<DoubleAnimation Duration="0" To="0.1" Storyboard.TargetProperty="Opacity"
												                 Storyboard.TargetName="MouseOverBorder" />
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Disabled" />
									</VisualStateGroup>
									<VisualStateGroup x:Name="SelectionStates">
										<VisualStateGroup.Transitions>
											<VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.6" GeneratedEasingFunction="{x:Null}"
											                  Storyboard="{x:Null}" To="{x:Null}" />
										</VisualStateGroup.Transitions>
										<VisualState x:Name="Selected">
											<Storyboard>
												<DoubleAnimation Duration="0" To="0.18" Storyboard.TargetProperty="Opacity"
												                 Storyboard.TargetName="SelectedBorder" />
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Unselected" />
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<Grid>
									<Grid>
										<Border x:Name="MouseOverBorder" Opacity="0">
											<Border.Background>
												<TemplateBinding Property="Foreground">
													<TemplateBinding.Converter>
														<Converters:BrushRoundConverter HighValue="White" LowValue="Black" />
													</TemplateBinding.Converter>
												</TemplateBinding>
											</Border.Background>
										</Border>
										<Border x:Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5">
											<Border.Background>
												<TemplateBinding Property="Foreground">
													<TemplateBinding.Converter>
														<Converters:BrushRoundConverter HighValue="White" LowValue="Black" />
													</TemplateBinding.Converter>
												</TemplateBinding>
											</Border.Background>
											<Border.RenderTransform>
												<ScaleTransform ScaleX="1" />
											</Border.RenderTransform>
										</Border>
										<Wpf:Ripple x:Name="Ripple" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
										            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
											<Wpf:Ripple.Feedback>
												<TemplateBinding Property="Foreground">
													<TemplateBinding.Converter>
														<Converters:BrushRoundConverter HighValue="White" LowValue="Black" />
													</TemplateBinding.Converter>
												</TemplateBinding>
											</Wpf:Ripple.Feedback>
										</Wpf:Ripple>
									</Grid>
									<Grid x:Name="Content">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>

										<Grid>
											<Label x:Name="AppType" Content="{Binding AppTypeStr, UpdateSourceTrigger=PropertyChanged, Mode=OneTime}"
											       Width="40" Margin="4 0 0 0" Foreground="{StaticResource DrakBlue}"
											       Padding="1" VerticalAlignment="Center" />
										</Grid>
                                        <TextBox x:Name="AppName" Text="{Binding DisplayName, UpdateSourceTrigger=PropertyChanged}"
										         IsReadOnly="{Binding IsReadOnly, UpdateSourceTrigger=PropertyChanged}"
										         Grid.Column="1" VerticalContentAlignment="Center" Padding="1"
										         Background="Transparent" Margin="2" Style="{StaticResource MaterialDesignTextBox}"
										         cal:Message.Attach="[Event PreviewMouseDoubleClickEvent]=[Action PreviewMouseDoubleClickEvent()]">
                                            <TextBox.ToolTip>
                                                <TextBlock Text="{Binding ToolTip, Mode=OneTime}"/>
                                            </TextBox.ToolTip>
                                        </TextBox>
										<Button Grid.Column="2" Style="{StaticResource MaterialDesignFloatingActionAccentButton}"
										        Background="{x:Null}" BorderBrush="Transparent"
										        Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center">
											<i:Interaction.Behaviors>
												<softwaresAnalyze:DropDownButtonBehavior />
											</i:Interaction.Behaviors>

											<Viewbox Width="24" Height="24">
												<Canvas Width="24" Height="24">
													<Path
														Data="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z"
														Fill="{StaticResource Primary}" />
												</Canvas>
											</Viewbox>

											<Button.ContextMenu>
												<ContextMenu>
													<MenuItem Header="Edit"
													          Visibility="{Binding IsAllowEdit, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
													          cal:Message.Attach="[Event Click]=[Action Edit()]" />
													<MenuItem Header="Save"
													          Visibility="{Binding IsAllowSave, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
													          cal:Message.Attach="[Event Click]=[Action Save()]" />
													<MenuItem Header="Cancel"
													          Visibility="{Binding IsAllowCancel, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
													          cal:Message.Attach="[Event Click]=[Action Cancel()]" />
												</ContextMenu>
											</Button.ContextMenu>
										</Button>
									</Grid>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsReadOnly" SourceName="AppName" Value="True">
									<Setter Property="BorderBrush" Value="Transparent" TargetName="AppName" />
								</Trigger>
								<Trigger Property="IsReadOnly" SourceName="AppName" Value="False">
									<Setter Property="BorderBrush" Value="#FF3399FF" TargetName="AppName" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

            <Style x:Key="TextBoxSearch" TargetType="{x:Type TextBox}">
                <Setter Property="Foreground" Value="{StaticResource TextIcon}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
                <Setter Property="BorderThickness" Value="0,0,0,1"/>
                <Setter Property="Wpf:TextFieldAssist.TextBoxViewMargin" Value="1,0"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="CaretBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="True"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Grid VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="True">
                                <Border x:Name="border" BorderBrush="{DynamicResource Primary}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="0,4" SnapsToDevicePixels="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid Margin="{TemplateBinding Padding}" Background="{DynamicResource Primary}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                        <TextBlock x:Name="Hint" IsHitTestVisible="False" Margin="2,0" Opacity="{Binding (Wpf:TextFieldAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}" Text="{Binding (Wpf:TextFieldAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}">
                                            <TextBlock.Visibility>
                                                <TemplateBinding Property="Text">
                                                    <TemplateBinding.Converter>
                                                        <Converters:TextFieldHintVisibilityConverter IsEmptyValue="Visible" IsNotEmptyValue="Hidden"/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </TextBlock.Visibility>
                                        </TextBlock>
                                        <Button x:Name="close" Grid.Column="1"
                                                Style="{DynamicResource ButtonStyleNoBorder}"
                                                cal:Message.Attach="[Event Click] = [Action ClearFilter()]"/>
                                    </Grid>
                                </Border>
                                <Wpf:Underline x:Name="Underline" Background="{TemplateBinding Foreground}" OverridesDefaultStyle="False" Height="1"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Visibility" Value="Hidden" SourceName="Hint">
                                    <Setter Property="IsActive" TargetName="Underline" Value="True"/>
                                    <Setter Property="Visibility" TargetName="close" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="Visibility" Value="Visible" SourceName="Hint">
                                    <Setter Property="Visibility" TargetName="close" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    <Setter Property="IsActive" TargetName="Underline" Value="True"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="IsActive" TargetName="Underline" Value="True"/>
                                </Trigger>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                                    <Setter Property="Background" TargetName="Underline" Value="{DynamicResource ValidationErrorBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                            <Condition Property="IsSelectionActive" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ButtonStyleNoBorder" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource TextIcon}"/>
                <Setter Property="BorderBrush" Value="{StaticResource TextIcon}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{StaticResource TextIcon}"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"  SnapsToDevicePixels="true">
                                <Viewbox Width="Auto" Height="Auto">
                                    <Canvas Width="24" Height="24" Background="{DynamicResource Primary}">
                                        <Path x:Name="Path" Data="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z" Fill="{TemplateBinding Foreground}" />
                                    </Canvas>
                                </Viewbox>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="#ADADAD"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Fill" TargetName="Path" Value="Red"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Fill" TargetName="Path" Value="Green"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
	</Application.Resources>
</Application>